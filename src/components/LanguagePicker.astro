---
import { languages } from '../i18n/languages';

interface Props {
  currentLang: string;
}

const { currentLang } = Astro.props;

const getCurrentPath = () => {
  const pathname = Astro.url.pathname;
  const segments = pathname.split('/').filter(segment => segment);
  
  if (segments.length > 0 && Object.keys(languages).includes(segments[0])) {
    segments.shift();
  }
  
  return '/' + segments.join('/');
};

const currentPath = getCurrentPath();
---

<div class="relative language-picker group">
  <button 
    class="px-4 py-2 rounded-lg glassmorphism-clean transition-all border border-indigo-500/30 flex items-center gap-2 hover:scale-105 duration-300"
    aria-label="Selecionar idioma"
  >
    <svg class="w-5 h-5 text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5h12M9 3v2m1.048 9.5A18.022 18.022 0 016.412 9m6.088 9h7M11 21l5-10 5 10M12.751 5C11.783 10.77 8.07 15.61 3 18.129"></path>
    </svg>
    <span class="text-sm font-medium uppercase text-slate-200">{currentLang}</span>
    <svg class="w-4 h-4 text-slate-400 transition-transform duration-300 group-hover:rotate-180" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
    </svg>
  </button>
  
  <div class="language-menu absolute top-full right-0 mt-2 py-2 rounded-xl glassmorphism-clean border border-indigo-500/30 shadow-2xl opacity-0 invisible transition-all duration-300 min-w-[160px] z-50">
    {Object.entries(languages).map(([lang, label]) => {
      const href = lang === 'pt' ? currentPath : `/${lang}${currentPath}`;
      return (
        <a
          href={href}
          class={`block px-6 py-3 text-sm hover:bg-indigo-500/20 transition-colors duration-200 ${lang === currentLang ? 'text-indigo-400 font-bold bg-indigo-500/10' : 'text-slate-300'}`}
        >
          {label}
        </a>
      );
    })}
  </div>
</div>

<script>
  document.querySelectorAll('.language-picker').forEach(picker => {
    const button = picker.querySelector('button');
    const menu = picker.querySelector('.language-menu');
    
    button?.addEventListener('click', (e) => {
      e.stopPropagation();
      menu?.classList.toggle('opacity-0');
      menu?.classList.toggle('invisible');
    });

    document.addEventListener('click', (e) => {
      if (!picker.contains(e.target as Node)) {
        menu?.classList.add('opacity-0');
        menu?.classList.add('invisible');
      }
    });
  });
</script>
